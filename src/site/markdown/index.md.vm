#*
 * Hotspot compile command annotations - http://compile-command-annotations.nicoulaj.net
 * Copyright Â© 2014-2019 Hotspot compile command annotations contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#
Introduction
------------

The [Hotspot JVM](http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html) allows to provide a command file for the JIT compiler (see [-XX:CompileCommandFile](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html)).

Using this project, you can generate this file automatically from annotations in the source code.


Disclaimer
----------

The Hotspot JIT does a tremendous work optimizing your code, don't see this as "@Inline for the masses" : this is not a cheap way to make your code faster.

Also, this is not portable and uses an internal feature of the Hotspot JVM.

Only use this if you know what you are doing and have a good reason to.


Usage
-----

 * Add the jar to your compilation classpath (or grab it directly at [Maven central repository](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22${project.artifactId}%22)):

        <dependencies>
          <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>${project.artifactId}</artifactId>
            <version>${project.version}</version>
            <optional>true</optional>
          </dependency>
        </dependencies>

 * Add annotations in your source code :

        @Inline
        public void method01() {
        }

       See [samples](${project.scm.url}/tree/master/src/samples/java/net/nicoulaj/compilecommand) and [integration tests](${project.scm.url}/tree/master/src/it/tests).

 * When your program is compiled, the file is generated at `META-INF/hotspot_compiler`

 * You can then run your program using the compile command file:

        java -XX:CompileCommandFile:target/classes/META-INF/hotspot_compiler ...


Incremental compilation support for Gradle
------------------------------------------

The Gradle plugin [gradle-compilecommand](https://plugins.gradle.org/plugin/org.caffinitas.gradle.compilecommand)
([github](https://github.com/snazy/gradle-compilecommand/)) hides the complexity of using incremental compilation
with Gradle and the compile-command-annotations annotation processor.

To apply the plugin add the following to your module's `build.gradle.kts` (Kotlin):

        plugins {
            id("org.caffinitas.gradle.compilecommand") version "0.1.2"
        }

        compileCommands {
            add {
                outputFile = project.file("conf/hotspot_compiler")  // or whereever you want the compile-commands file to be
                sourceSet = sourceSets.main
            }
        }

`build.gradle` (Groovy):
        plugins {
            id 'org.caffinitas.gradle.compilecommand' version "0.1.2"
        }

        compileCommands {
            add {
                outputFile = project.file("conf/hotspot_compiler")  // or whereever you want the compile-commands file to be
                sourceSet = sourceSets.main
            }
        }

The compile-command annotation-processor dependency is added to the `compileOnly` and `annotationProcessor`.
configurations. The coordinates of the dependency (as of plugin version 0.1.2) are
`net.nicoulaj.compile-command-annotations:compile-command-annotations:1.2.3`. To use a different version of the
annotation-processor, set the property `compileCommandsDependency` in the `compileCommands` extension.
